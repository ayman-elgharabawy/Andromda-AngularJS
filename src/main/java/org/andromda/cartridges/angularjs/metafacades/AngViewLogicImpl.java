// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angularjs.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.text.html.parser.TagElement;

import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.metafacades.uml.EventFacade;
import org.andromda.metafacades.uml.FrontEndAction;
import org.andromda.metafacades.uml.FrontEndForward;
import org.andromda.metafacades.uml.FrontEndParameter;
import org.andromda.metafacades.uml.FrontEndView;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.OperationFacade;
import org.andromda.metafacades.uml.ParameterFacade;
import org.andromda.metafacades.uml.StateFacade;
import org.andromda.metafacades.uml.StateVertexFacade;
import org.andromda.metafacades.uml.TaggedValueFacade;
import org.andromda.metafacades.uml.TransitionFacade;
import org.apache.log4j.Logger;

/**
 * <p>
 * Represents a JSF view for a front-end application.
 * </p>
 * MetafacadeLogic implementation for org.andromda.cartridges.angularjs.metafacades.AngView.
 *
 * @see org.andromda.cartridges.angularjs.metafacades.AngView
 */
public class AngViewLogicImpl
    extends AngViewLogic
{
	
	   /**
     * The logger instance.
     */
    private static final Logger LOGGER = Logger.getLogger(AngViewLogicImpl.class);
    
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngViewLogicImpl
     * @see org.andromda.cartridges.angularjs.metafacades.AngView
     */
    public AngViewLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    /**
     * <p>
     * The full path of the view resources (i.e. the JSP page).
     * </p>
     * @see org.andromda.cartridges.angularjs.metafacades.AngView#getPath()
     */
    protected String handleGetPath()
    {
        // TODO put your implementation here.
        return null;
    }

    /**
     * <p>
     * Indicates whether or not at least one parameter of an outgoing
     * action in this view requires validation.
     * </p>
     * @see org.andromda.cartridges.angularjs.metafacades.AngView#isValidationRequired()
     */
    protected boolean handleIsValidationRequired()
    {
        // TODO put your implementation here.
        return false;
    }


	protected String handleGetAngModel() {
		// TODO Auto-generated method stub
		if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MODEL)!=null){
			 return this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MODEL).toString();
			}else{
				return "";
			}
		
	

	}

	@Override
	protected Collection<StateFacade> handleGetOutgoingsStates() {
		// TODO Auto-generated method stub

	Collection ss = new ArrayList();
	Collection transitionList=this.getOutgoings();
	Iterator iter=transitionList.iterator();
	while(iter.hasNext()){
	TransitionFacade tf=(TransitionFacade) iter.next();
	StateFacade svf=(StateFacade)tf.getTarget();
	    ss.add(svf);
	}
		return ss;
	}

	@Override
	protected Collection<StateFacade> handleGetOutgoingsStatesHasLinkAction() {
		// TODO Auto-generated method stub
		Collection ss = new ArrayList();
		Collection transitionList=this.getOutgoings();
		Iterator iter=transitionList.iterator();
		while(iter.hasNext()){
		TransitionFacade tf=(TransitionFacade) iter.next();
		if(JSFGlobals.ACTION_TYPE_HYPERLINK.equals(tf.findTaggedValue(JSFProfile.TAGGEDVALUE_ACTION_TYPE)))
		  {
		StateFacade svf=(StateFacade)tf.getTarget();
		 ss.add(svf);
		  }
		}
			return ss;
	}

	@Override
	protected Collection<StateFacade> handleGetOutgoingsStatesHasNoLinkAction() {
		
		// TODO Auto-generated method stub
		Collection ss = new ArrayList();
		Collection transitionList=this.getOutgoings();
		Iterator iter=transitionList.iterator();
		while(iter.hasNext()){
		TransitionFacade tf=(TransitionFacade) iter.next();
		if(!JSFGlobals.ACTION_TYPE_HYPERLINK.equals(tf.findTaggedValue(JSFProfile.TAGGEDVALUE_ACTION_TYPE)))
		  {
		  StateFacade svf=(StateFacade)tf.getTarget();
		  ss.add(svf);
		  }
		}
			return ss;
	}
	
	@Override
	protected Collection<StateFacade> handleGetOutgoingsStatesHasFormAction() {
		// TODO Auto-generated method stub
		Collection ss = new ArrayList();
		Collection<TransitionFacade> transitionList=this.getOutgoings();
		Iterator iter=transitionList.iterator();
		while(iter.hasNext()){
		TransitionFacade tf=(TransitionFacade) iter.next();
		if(JSFGlobals.ACTION_TYPE_FORM.equals(tf.findTaggedValue(JSFProfile.TAGGEDVALUE_ACTION_TYPE)))
		  {
		StateFacade svf=(StateFacade)tf.getTarget();
		ss.add(svf);
		  }
		}
			return ss;
	}

	@Override
	protected String handleGetViewType() {
		// TODO Auto-generated method stub
		if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_VIEWTYPE)!=null){
			 return this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_VIEWTYPE).toString();
			}else{
				return "form";
			}
	}

	@Override
	protected boolean handleIsMaster() {
		// TODO Auto-generated method stub
		if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MASTER)!=null){
			 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MASTER).toString()).booleanValue();
			}else{
				return false;
			}
	}

	@Override
	protected boolean handleIsDetail() {
		// TODO Auto-generated method stub
		if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_DETAIL)!=null){
			 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_DETAIL).toString()).booleanValue();
			}else{
				return false;
			}
	}

	@Override
	protected String handleGetMasterPage() {
		
	
		// TODO Auto-generated method stub
		//if(!this.handleIsMaster()){
			
			Collection<TransitionFacade> inclist=this.getIncomings();
					Iterator i = inclist.iterator();
					while (i.hasNext())
					  {
						TransitionFacade saFacade = (TransitionFacade) i.next();
						StateFacade sf=(StateFacade) saFacade.getSource();
	                     Collection<TransitionFacade> inclist2=sf.getIncomings();

						  Iterator i2 = inclist2.iterator();
								while (i2.hasNext()){
									TransitionFacade saFacade2 = (TransitionFacade) i2.next();
									StateFacade sf2=(StateFacade) saFacade2.getSource();
						if(sf2.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MASTER)!=null)
							 if( Boolean.valueOf(sf2.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_MASTER).toString()).booleanValue()){
								 return sf2.getName();
							 }
								}
					  }
		
		return "nomaster";
	}

	
	protected Collection<StateFacade> handleGetDetailPages() {
		// TODO Auto-generated method stub
	
			ArrayList<StateFacade> detaillist= new ArrayList();

			Collection<TransitionFacade> inclist=this.getOutgoings();

					Iterator<TransitionFacade> i = inclist.iterator();
					while (i.hasNext())
					  {
						System.out.println("==========handleGetDetailPages=================");
						TransitionFacade saFacade = (TransitionFacade) i.next();
						StateFacade sf=(StateFacade) saFacade.getTarget();
						Collection<TransitionFacade> inclist2=sf.getOutgoings();
                          Iterator<TransitionFacade> i2 = inclist2.iterator();
								while (i2.hasNext()){
									System.out.println("==========handleGetDetailPage   2=================");
									TransitionFacade saFacade2 = (TransitionFacade) i2.next();
									StateFacade sf2=(StateFacade) saFacade2.getTarget();
						if(sf2.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_DETAIL)!=null)
							 if( Boolean.valueOf(sf2.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGVIEW_DETAIL).toString()).booleanValue()){
								 detaillist.add(sf2);
							 }
								}
					  }
			
		
		return detaillist;
	}

	
	
	@Override
	protected Object handleGetController() {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	protected boolean handleHasParameter() {
		// TODO Auto-generated method stub
		 Collection paramlist=this.getVariables();

         Iterator i = paramlist.iterator();
				while (i.hasNext())
				  {
					ParameterFacade pFacade = (ParameterFacade) i.next();
					
					if(!pFacade.hasStereotype(JSFProfile.FRONT_END_FIELD)){
					return true;
				  }
				
	}
				return false;
	}

	@Override
	protected Collection handleGetNextViewStatesHasGaurd() {

		ArrayList<StateFacade> nextlist= new ArrayList();

		Collection<TransitionFacade> inclist=this.getOutgoings();

				Iterator<TransitionFacade> i = inclist.iterator();
				while (i.hasNext())
				  {
					TransitionFacade saFacade = (TransitionFacade) i.next();
					StateFacade sf=(StateFacade) saFacade.getTarget();
					if(sf.hasStereotype(JSFProfile.ST_ANGVIEW)){
						Iterator itg=sf.getIncomings().iterator();
					while (itg.hasNext())
						  {
							TransitionFacade ggFacade = (TransitionFacade)itg.next();
							System.out.println("==========level1======="+sf.getName());
							if(ggFacade.getGuard()!=null){
						   System.out.println("==========Add ======="+sf.getName());
							nextlist.add(sf);
							}
							//continue loop;
						  }						  
						 }
					Collection<TransitionFacade> inclist2=sf.getOutgoings();
                      Iterator<TransitionFacade> i2 = inclist2.iterator();
							while (i2.hasNext()){
								TransitionFacade saFacade2 = (TransitionFacade) i2.next();
								StateFacade sf2=(StateFacade) saFacade2.getTarget();
					if(sf2.hasStereotype(JSFProfile.ST_ANGVIEW)){
						Iterator itg2=sf2.getIncomings().iterator();
						while (itg2.hasNext())
						  {
							System.out.println("==========level2======="+sf2.getName());
							TransitionFacade ggFacade = (TransitionFacade)itg2.next();
							if(ggFacade.getGuard()!=null){
							System.out.println("==========Add ======="+sf2.getName());
							nextlist.add(sf2);
							}
							//continue;
						  }
					}
					
					Collection<TransitionFacade> inclist3=sf2.getOutgoings();
                    Iterator<TransitionFacade> i3 = inclist3.iterator();
							while (i3.hasNext()){
								TransitionFacade saFacade3 = (TransitionFacade) i3.next();
								StateFacade sf3=(StateFacade) saFacade3.getTarget();
					if(sf3.hasStereotype(JSFProfile.ST_ANGVIEW)){
						Iterator itg3=sf3.getIncomings().iterator();
						while (itg3.hasNext())
						  {
							TransitionFacade ggFacade = (TransitionFacade)itg3.next();
							System.out.println("==========level3======="+sf3.getName());
							if(ggFacade.getGuard()!=null){
						  System.out.println("==========Add ======="+sf3.getName());
							nextlist.add(sf3);
							}
							//continue;
						  }
						 }
					
						 }
				  
							}
				  }
	return nextlist;
	}






}