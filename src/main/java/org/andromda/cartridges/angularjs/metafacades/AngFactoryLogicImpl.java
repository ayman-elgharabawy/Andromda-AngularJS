// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.angularjs.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.andromda.metafacades.uml.ClassifierFacade;
import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.metafacades.uml.OperationFacade;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;

/**
 * 
 * MetafacadeLogic implementation for org.andromda.cartridges.angularjs.metafacades.AngFactory.
 *
 * @see org.andromda.cartridges.angularjs.metafacades.AngFactory
 */
public class AngFactoryLogicImpl
    extends AngFactoryLogic
{
    private static final long serialVersionUID = 34L;
    /**
     * Public constructor for AngFactoryLogicImpl
     * @see org.andromda.cartridges.angularjs.metafacades.AngFactory
     */
    public AngFactoryLogicImpl (Object metaObject, String context)
    {
        super(metaObject, context);
    }

    protected java.lang.String handleGetUrl()
    {
    
        // TODO: put your implementation here.
    	String resturl = null;
		if (this.hasStereotype(JSFProfile.ST_ANGFACTORY)) {
			resturl = ObjectUtils.toString(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_URL));
		}
		if (StringUtils.isEmpty(resturl)) {
			resturl = "Unidentifiable url";
		}

		return resturl;
    }



protected boolean handleIsCreate() {
	// TODO Auto-generated method stub

if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_CREATE)!=null){
	 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_CREATE).toString()).booleanValue();
}
else{
	return false;
}
}

protected boolean handleIsUpdate() {
	// TODO Auto-generated method stub
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_UPDATE)!=null){
		 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_UPDATE).toString()).booleanValue();
	}else{
		return false;
	}
}

protected boolean handleIsDelete() {

	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_DELETE)!=null){
 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_DELETE).toString()).booleanValue();
	}else{
		return false;
	}		
}

protected boolean handleIsQuery() {
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_QUERY)!=null){	
	 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_QUERY).toString()).booleanValue();
	}else{
		return false;
	}
}

@Override
protected String handleGetFname() {
	
	// TODO Auto-generated method stub
	String fname="";
	if(StringUtils.isEmpty(this.getName())){
		fname=this.getArrayName();
	}else{
		fname=this.getName();
	}
	return fname;
}

@Override
protected boolean handleIsShow() {
	// TODO Auto-generated method stub
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOW)!=null){
	 return Boolean.valueOf(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOW).toString()).booleanValue();
	}else{
		return false;
	}
}

@Override
protected String handleGetFactoryType() {
	// TODO Auto-generated method stub
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_FACTORYTYPE)!=null){	
		 return this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_FACTORYTYPE).toString();
		}else{
			return "master";
		}
}



@Override
protected Object handleGetAngController() {
	// TODO Auto-generated method stub
	return null;
}

@Override
protected String handleGetShowParams() {
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOWPARAMS)!=null){
    return this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOWPARAMS).toString();
		}else{
		return "";
		}
}


@Override
protected String handleGetShapedShowParams() {
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOWPARAMS)!=null){
		 String returnData= this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_SHOWPARAMS).toString();
 Collection totalist=AngHelper.getArgumentsAsList(returnData);
 String  stringArgument="";
		 Iterator<String> iter1= totalist.iterator();
		 int counter=0;
		 while(iter1.hasNext()){
			 String par1=iter1.next().toString();
			 if(counter==0){
stringArgument= "?"+par1+"=:"+par1; 
			 }else{
 stringArgument= stringArgument+"&"+par1+"=:"+par1; 	 
			 }
			 counter=counter+1;
               }
		return stringArgument;
          }else{
		return "";
		}
}

@Override
protected String handleGetDeleteParams() {
	if(this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_DELETEPARAMS)!=null){
		 String returnval= this.findTaggedValue(JSFProfile.TAGGEDVALUE_ANGFACTORY_DELETEPARAMS).toString();
		// String results= returnval.replaceAll(",", "/:");
		 String tot= returnval+":'@"+returnval+"'";
		return tot;
	}else{
		return "";
		}
}




}